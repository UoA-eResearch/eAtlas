{"version":3,"sources":["components/GeomExplore.jsx","components/DUI.jsx"],"names":["GeomExplore","props","useState","data","setData","useEffect","geom","geometry","coordinates","join","style","color","sfType","wordBreak","length","substring","url","Constants","PRD_URL","DUI","state","checked","loading","_fetchAndUpdateState","bind","_generateBarChart","key","sublist","this","bars","slice","sub_data","propertyCount","margin","left","bottom","title","humanize","xType","width","height","padding","text","fill","tickPadding","tickLabelAngle","tickFormat","v","format","aURL","fullURL","fetchData","error","setState","features","name","dark","className","background","File","contentCallback","json","JSON","parse","URL","urlCallback","id","shortenName","Variables","propertyValuesCallback","sort","a","b","AddVIS","noAccordion","plotStyle","Table","React","Component"],"mappings":"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","file":"static/js/3.f138e00b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { sfType } from '../geojsonutils';\n\nexport default function GeomExplore(props) {\n  const [data, setData] = useState(props.data)\n  // console.log(data[1]);\n  useEffect(() => {\n      setData(props.data);\n  }, [props.data])\n  const geom = data[0].geometry && data[0].geometry.coordinates.join(' - ');\n  return (\n    <div style={{ color: 'white' }}>\n      First row is: {' '} {sfType(data[0])}\n      <p style={{wordBreak: 'break-all'}}>\n        {geom.length > 50 ? geom.substring(0, 50) + \" ... \" + geom.length + \" characters long.\" : geom}\n      </p>\n    </div>\n  )\n}","/**\r\n * WIP to see if it is possible to match data to appropriate UI.\r\n * \r\n * Expert/novice users could decide to explore the data they want\r\n * they way they want. \r\n * \r\n * 1. Select your variable.\r\n * 2. Select the type of UI for the variable.\r\n * 3. Select the values you like to explore\r\n * 4. Select the visualization for those values.\r\n * \r\n */\r\nimport React from 'react';\r\nimport { FlexibleXYPlot, VerticalBarSeries, XAxis, YAxis } from 'react-vis';\r\nimport { format } from 'd3-format';\r\n\r\nimport {\r\n  shortenName,\r\n  fetchData, humanize\r\n} from '../utils';\r\nimport Variables from './Variables';\r\nimport Constants from '../Constants';\r\nimport File from './File';\r\nimport GenerateUI from './UI';\r\nimport URL from './URL';\r\nimport { propertyCount } from '../geojsonutils';\r\nimport GeomExplore from './GeomExplore';\r\nimport Table from './Table';\r\nimport AddVIS from './AddVIS';\r\n\r\nconst WIDTH = 400;\r\nconst BAR_HEIGHT = 320;\r\nconst url = (process.env.NODE_ENV === 'development' ? Constants.DEV_URL : Constants.PRD_URL);\r\n\r\nexport default class DUI extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      checked: false,\r\n      loading: true\r\n    }\r\n    this._fetchAndUpdateState = this._fetchAndUpdateState.bind(this);\r\n    this._generateBarChart = this._generateBarChart.bind(this);\r\n  }\r\n\r\n  _generateBarChart(key, sublist) {\r\n    const { data } = this.state;\r\n    if (!key || !sublist) return;\r\n    let bars = sublist;\r\n    if (sublist.length > 10) {\r\n      bars = bars.slice(0, 10)\r\n    }\r\n    let sub_data = propertyCount(data, key, bars);\r\n    return (\r\n      <FlexibleXYPlot\r\n        margin={{ left: 100, bottom: 100 }}\r\n        title={humanize(key)}\r\n        xType=\"ordinal\"\r\n        width={WIDTH} height={BAR_HEIGHT}\r\n        style={{\r\n          padding: 10,\r\n        }}>\r\n        <YAxis\r\n          style={{ text: { fill: '#fff' } }}\r\n          tickPadding={10}\r\n          tickLabelAngle={-45}\r\n          tickFormat={v => format(\".2s\")(v)} />\r\n        <XAxis\r\n          style={{ text: { fill: '#fff' } }}\r\n          tickLabelAngle={-45}\r\n          tickFormat={v => (v + \"\").length > 15 ? (v + \"\").substring(0, 8) + \"...\" : v}\r\n        />\r\n        <VerticalBarSeries\r\n          // color={v => v === \"Fatal\" ? 1 : v === \"Slight\" ? 0 : null}\r\n          data={sub_data} />\r\n      </FlexibleXYPlot>\r\n    )\r\n  }\r\n\r\n  _fetchAndUpdateState(aURL) {\r\n    // TODO: more sanity checks?\r\n    const fullURL = aURL ?\r\n      aURL : url + \"/api/covid19w\";\r\n\r\n    fetchData(fullURL, (data, error) => {\r\n      if (!error) {\r\n        this.setState({\r\n          loading: false,\r\n          data: data.features,\r\n          name: aURL || url\r\n        })\r\n      } else {\r\n        this.setState({\r\n          loading: false,\r\n        })\r\n        //network error?\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._fetchAndUpdateState()\r\n  }\r\n\r\n  // componentDidUpdate(prevProps) {\r\n  // this._fetchAndUpdateState()\r\n  // }\r\n\r\n  render() {\r\n    const { data, key, sublist, name, loading } = this.state;\r\n    const { dark } = this.props;\r\n    return (\r\n      <div className=\"content\" style={{\r\n        background: dark ? '#242730' : 'white',\r\n        margin: 'auto', padding: '5%', color: dark ? '#a3a5a8' : 'black'\r\n      }}>\r\n\r\n        <File contentCallback={({ text, name }) => {\r\n          try {\r\n            const json = JSON.parse(text)\r\n            this.setState({\r\n              name,\r\n              data: json.features\r\n            })\r\n          } catch (error) {\r\n            // log?\r\n          }\r\n        }} />\r\n        <center>\r\n          <URL\r\n            dark={dark}\r\n            urlCallback={(url) => {\r\n              this._fetchAndUpdateState(url)\r\n            }} />\r\n        </center>\r\n        {loading && <div id=\"loading\"></div>}\r\n        {\r\n          data && <h3>\r\n            There are {` ${data.length} `} features in this\r\n                ({shortenName(name)}) resource.\r\n              </h3>\r\n        }\r\n        {\r\n          data && data.length > 0 &&\r\n          <Variables\r\n            dark={this.props.dark}\r\n            data={data}\r\n            propertyValuesCallback={({ key, sublist }) =>\r\n              this.setState({\r\n                key,\r\n                sublist: sublist.sort((a, b) => { return (a - b) })\r\n              })} />\r\n        }\r\n        {\r\n          //geometry explore\r\n          data && data.length > 0 &&\r\n          <GeomExplore data={data} />\r\n        }\r\n        {\r\n          key && sublist &&\r\n          <>\r\n            <hr />\r\n            <GenerateUI title={humanize(key)} sublist={sublist} />\r\n          </>\r\n        }\r\n        {\r\n          key && sublist &&\r\n          <center>\r\n            <h5>\r\n              For ({humanize(key)}) and its variables:\r\n                </h5>\r\n            <hr />\r\n            {this._generateBarChart(key, sublist)}\r\n          </center>\r\n        }\r\n        {/* {\r\n              key && sublist && <div>\r\n                <p>Key: {key}</p>\r\n                {\r\n                  sublist.map((each, i) => <p key={each + \"-\" + i}>{each}</p>)\r\n                }\r\n              </div>\r\n            } */}\r\n        <AddVIS data={data} noAccordion={true}\r\n          plotStyle={{\r\n            width: 620\r\n          }}\r\n        />\r\n        <p>Data preview:</p>\r\n        <Table data={data} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}